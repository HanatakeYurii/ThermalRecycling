/*
 * This file is part of ThermalRecycling, licensed under the MIT License (MIT).
 *
 * Copyright (c) OreCruncher
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */

// Date: 6/11/2015 5:14:27 AM
// Template version 1.1
// Java generated by Techne
// Keep in mind that you still need to fill in some blanks
// - ZeuX

package org.blockartistry.mod.ThermalRecycling.machines.entity.renderers;

import cpw.mods.fml.relauncher.Side;
import cpw.mods.fml.relauncher.SideOnly;
import net.minecraft.client.model.ModelBase;
import net.minecraft.client.model.ModelRenderer;
import net.minecraft.entity.Entity;

@SideOnly(Side.CLIENT)
public final class VendingModel extends ModelBase {
	
	// fields
	private final ModelRenderer Back;
	private final ModelRenderer Left;
	private final ModelRenderer Right;
	private final ModelRenderer Top;
	private final ModelRenderer Bottom;

	public VendingModel() {
		textureWidth = 128;
		textureHeight = 64;

		Back = new ModelRenderer(this, 0, 0);
		Back.addBox(0F, 0F, 0F, 16, 30, 1);
		Back.setRotationPoint(8F, -7F, 8F);
		Back.setTextureSize(128, 64);
		Back.mirror = true;
		setRotation(Back, 0F, 3.141593F, 0F);
		Left = new ModelRenderer(this, 0, 0);
		Left.addBox(0F, 0F, 0F, 16, 30, 1);
		Left.setRotationPoint(-8F, -7F, 8F);
		Left.setTextureSize(128, 64);
		Left.mirror = true;
		setRotation(Left, 0F, 1.570796F, 0F);
		Right = new ModelRenderer(this, 0, 0);
		Right.addBox(0F, 0F, 0F, 16, 30, 1);
		Right.setRotationPoint(8F, -7F, -8F);
		Right.setTextureSize(128, 64);
		Right.mirror = true;
		setRotation(Right, 0F, -1.570796F, 0F);
		Top = new ModelRenderer(this, 0, 32);
		Top.addBox(0F, 0F, 0F, 16, 1, 16);
		Top.setRotationPoint(-8F, -8F, -8F);
		Top.setTextureSize(128, 64);
		Top.mirror = true;
		setRotation(Top, 0F, 0F, 0F);
		Bottom = new ModelRenderer(this, 0, 32);
		Bottom.addBox(0F, 0F, -8F, 16, 1, 16);
		Bottom.setRotationPoint(8F, 24F, 0F);
		Bottom.setTextureSize(128, 64);
		Bottom.mirror = true;
		setRotation(Bottom, 0F, 0F, 3.141593F);
	}

	public void render(final Entity entity, final float f, final float f1,
			final float f2, final float f3, final float f4, final float f5) {
		super.render(entity, f, f1, f2, f3, f4, f5);
		setRotationAngles(f, f1, f2, f3, f4, f5, entity);
		Back.render(f5);
		Left.render(f5);
		Right.render(f5);
		Top.render(f5);
		Bottom.render(f5);
	}

	private void setRotation(final ModelRenderer model, final float x,
			final float y, final float z) {
		model.rotateAngleX = x;
		model.rotateAngleY = y;
		model.rotateAngleZ = z;
	}

	public void setRotationAngles(final float f, final float f1,
			final float f2, final float f3, final float f4, final float f5,
			final Entity entity) {
		super.setRotationAngles(f, f1, f2, f3, f4, f5, entity);
	}

}
